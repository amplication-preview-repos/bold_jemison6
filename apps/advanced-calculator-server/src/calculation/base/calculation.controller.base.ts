/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CalculationService } from "../calculation.service";
import { CalculationCreateInput } from "./CalculationCreateInput";
import { Calculation } from "./Calculation";
import { CalculationFindManyArgs } from "./CalculationFindManyArgs";
import { CalculationWhereUniqueInput } from "./CalculationWhereUniqueInput";
import { CalculationUpdateInput } from "./CalculationUpdateInput";

export class CalculationControllerBase {
  constructor(protected readonly service: CalculationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Calculation })
  async createCalculation(
    @common.Body() data: CalculationCreateInput
  ): Promise<Calculation> {
    return await this.service.createCalculation({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,
        expression: true,
        timestamp: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Calculation] })
  @ApiNestedQuery(CalculationFindManyArgs)
  async calculations(@common.Req() request: Request): Promise<Calculation[]> {
    const args = plainToClass(CalculationFindManyArgs, request.query);
    return this.service.calculations({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,
        expression: true,
        timestamp: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Calculation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async calculation(
    @common.Param() params: CalculationWhereUniqueInput
  ): Promise<Calculation | null> {
    const result = await this.service.calculation({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        result: true,
        expression: true,
        timestamp: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Calculation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCalculation(
    @common.Param() params: CalculationWhereUniqueInput,
    @common.Body() data: CalculationUpdateInput
  ): Promise<Calculation | null> {
    try {
      return await this.service.updateCalculation({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          result: true,
          expression: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Calculation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCalculation(
    @common.Param() params: CalculationWhereUniqueInput
  ): Promise<Calculation | null> {
    try {
      return await this.service.deleteCalculation({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          result: true,
          expression: true,
          timestamp: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
