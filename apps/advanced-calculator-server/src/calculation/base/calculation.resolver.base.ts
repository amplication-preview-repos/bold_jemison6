/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Calculation } from "./Calculation";
import { CalculationCountArgs } from "./CalculationCountArgs";
import { CalculationFindManyArgs } from "./CalculationFindManyArgs";
import { CalculationFindUniqueArgs } from "./CalculationFindUniqueArgs";
import { CreateCalculationArgs } from "./CreateCalculationArgs";
import { UpdateCalculationArgs } from "./UpdateCalculationArgs";
import { DeleteCalculationArgs } from "./DeleteCalculationArgs";
import { CalculationService } from "../calculation.service";
@graphql.Resolver(() => Calculation)
export class CalculationResolverBase {
  constructor(protected readonly service: CalculationService) {}

  async _calculationsMeta(
    @graphql.Args() args: CalculationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Calculation])
  async calculations(
    @graphql.Args() args: CalculationFindManyArgs
  ): Promise<Calculation[]> {
    return this.service.calculations(args);
  }

  @graphql.Query(() => Calculation, { nullable: true })
  async calculation(
    @graphql.Args() args: CalculationFindUniqueArgs
  ): Promise<Calculation | null> {
    const result = await this.service.calculation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Calculation)
  async createCalculation(
    @graphql.Args() args: CreateCalculationArgs
  ): Promise<Calculation> {
    return await this.service.createCalculation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Calculation)
  async updateCalculation(
    @graphql.Args() args: UpdateCalculationArgs
  ): Promise<Calculation | null> {
    try {
      return await this.service.updateCalculation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Calculation)
  async deleteCalculation(
    @graphql.Args() args: DeleteCalculationArgs
  ): Promise<Calculation | null> {
    try {
      return await this.service.deleteCalculation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
