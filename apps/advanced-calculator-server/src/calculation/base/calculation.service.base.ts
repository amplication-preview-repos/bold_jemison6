/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Calculation as PrismaCalculation } from "@prisma/client";

export class CalculationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CalculationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.calculation.count(args);
  }

  async calculations(
    args: Prisma.CalculationFindManyArgs
  ): Promise<PrismaCalculation[]> {
    return this.prisma.calculation.findMany(args);
  }
  async calculation(
    args: Prisma.CalculationFindUniqueArgs
  ): Promise<PrismaCalculation | null> {
    return this.prisma.calculation.findUnique(args);
  }
  async createCalculation(
    args: Prisma.CalculationCreateArgs
  ): Promise<PrismaCalculation> {
    return this.prisma.calculation.create(args);
  }
  async updateCalculation(
    args: Prisma.CalculationUpdateArgs
  ): Promise<PrismaCalculation> {
    return this.prisma.calculation.update(args);
  }
  async deleteCalculation(
    args: Prisma.CalculationDeleteArgs
  ): Promise<PrismaCalculation> {
    return this.prisma.calculation.delete(args);
  }
}
